{"ast":null,"code":"import { ElementRef } from '@angular/core';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\n\nfunction coerceBooleanProperty(value) {\n  return value != null && `${value}` !== 'false';\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n  return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\n\n\nfunction _isNumberValue(value) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Coerces a value to a CSS pixel value. */\n\n\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Coerces an ElementRef or an Element into an element.\r\n * Useful for APIs that can accept either a ref or the native element itself.\r\n */\n\n\nfunction coerceElement(elementOrRef) {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Coerces a value to an array of trimmed non-empty strings.\r\n * Any input that is not an array, `null` or `undefined` will be turned into a string\r\n * via `toString()` and subsequently split with the given separator.\r\n * `null` and `undefined` will result in an empty array.\r\n * This results in the following outcomes:\r\n * - `null` -&gt; `[]`\r\n * - `[null]` -&gt; `[\"null\"]`\r\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\r\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\r\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\r\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\r\n *\r\n * Useful for defining CSS classes or table columns.\r\n * @param value the value to coerce into an array of strings\r\n * @param separator split-separator if value isn't an array\r\n */\n\n\nfunction coerceStringArray(value, separator = /\\s+/) {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };","map":{"version":3,"names":["ElementRef","coerceBooleanProperty","value","coerceNumberProperty","fallbackValue","_isNumberValue","Number","isNaN","parseFloat","coerceArray","Array","isArray","coerceCssPixelValue","coerceElement","elementOrRef","nativeElement","coerceStringArray","separator","result","sourceValues","split","sourceValue","trimmedString","trim","push"],"sources":["C:/Users/Cpshi/OneDrive/Documents/Swiggy-clone-angular/Frontend/node_modules/@angular/cdk/fesm2020/coercion.mjs"],"sourcesContent":["import { ElementRef } from '@angular/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a data-bound value (typically a string) to a boolean. */\r\nfunction coerceBooleanProperty(value) {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceNumberProperty(value, fallbackValue = 0) {\r\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\r\n}\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nfunction _isNumberValue(value) {\r\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\r\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\r\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\r\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction coerceArray(value) {\r\n    return Array.isArray(value) ? value : [value];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Coerces a value to a CSS pixel value. */\r\nfunction coerceCssPixelValue(value) {\r\n    if (value == null) {\r\n        return '';\r\n    }\r\n    return typeof value === 'string' ? value : `${value}px`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces an ElementRef or an Element into an element.\r\n * Useful for APIs that can accept either a ref or the native element itself.\r\n */\r\nfunction coerceElement(elementOrRef) {\r\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Coerces a value to an array of trimmed non-empty strings.\r\n * Any input that is not an array, `null` or `undefined` will be turned into a string\r\n * via `toString()` and subsequently split with the given separator.\r\n * `null` and `undefined` will result in an empty array.\r\n * This results in the following outcomes:\r\n * - `null` -&gt; `[]`\r\n * - `[null]` -&gt; `[\"null\"]`\r\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\r\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\r\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\r\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\r\n *\r\n * Useful for defining CSS classes or table columns.\r\n * @param value the value to coerce into an array of strings\r\n * @param separator split-separator if value isn't an array\r\n */\r\nfunction coerceStringArray(value, separator = /\\s+/) {\r\n    const result = [];\r\n    if (value != null) {\r\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\r\n        for (const sourceValue of sourceValues) {\r\n            const trimmedString = `${sourceValue}`.trim();\r\n            if (trimmedString) {\r\n                result.push(trimmedString);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\r\n\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;EAClC,OAAOA,KAAK,IAAI,IAAT,IAAkB,GAAEA,KAAM,EAAT,KAAe,OAAvC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA8BD,KAA9B,EAAqCE,aAAa,GAAG,CAArD,EAAwD;EACpD,OAAOC,cAAc,CAACH,KAAD,CAAd,GAAwBI,MAAM,CAACJ,KAAD,CAA9B,GAAwCE,aAA/C;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBH,KAAxB,EAA+B;EAC3B;EACA;EACA;EACA,OAAO,CAACK,KAAK,CAACC,UAAU,CAACN,KAAD,CAAX,CAAN,IAA6B,CAACK,KAAK,CAACD,MAAM,CAACJ,KAAD,CAAP,CAA1C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,WAAT,CAAqBP,KAArB,EAA4B;EACxB,OAAOQ,KAAK,CAACC,OAAN,CAAcT,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAtC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASU,mBAAT,CAA6BV,KAA7B,EAAoC;EAChC,IAAIA,KAAK,IAAI,IAAb,EAAmB;IACf,OAAO,EAAP;EACH;;EACD,OAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAqC,GAAEA,KAAM,IAApD;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,SAASW,aAAT,CAAuBC,YAAvB,EAAqC;EACjC,OAAOA,YAAY,YAAYd,UAAxB,GAAqCc,YAAY,CAACC,aAAlD,GAAkED,YAAzE;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2Bd,KAA3B,EAAkCe,SAAS,GAAG,KAA9C,EAAqD;EACjD,MAAMC,MAAM,GAAG,EAAf;;EACA,IAAIhB,KAAK,IAAI,IAAb,EAAmB;IACf,MAAMiB,YAAY,GAAGT,KAAK,CAACC,OAAN,CAAcT,KAAd,IAAuBA,KAAvB,GAAgC,GAAEA,KAAM,EAAT,CAAWkB,KAAX,CAAiBH,SAAjB,CAApD;;IACA,KAAK,MAAMI,WAAX,IAA0BF,YAA1B,EAAwC;MACpC,MAAMG,aAAa,GAAI,GAAED,WAAY,EAAf,CAAiBE,IAAjB,EAAtB;;MACA,IAAID,aAAJ,EAAmB;QACfJ,MAAM,CAACM,IAAP,CAAYF,aAAZ;MACH;IACJ;EACJ;;EACD,OAAOJ,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASb,cAAT,EAAyBI,WAAzB,EAAsCR,qBAAtC,EAA6DW,mBAA7D,EAAkFC,aAAlF,EAAiGV,oBAAjG,EAAuHa,iBAAvH"},"metadata":{},"sourceType":"module"}