"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var cleave_js_1 = require("cleave.js");
var availableTypes = [
    'creditCard',
    'phone',
    'date',
    'numeral'
];
var CleaveDirective = /** @class */ (function () {
    function CleaveDirective(el) {
        this.el = el;
        this.cleaveInstance = null;
        this.el = el;
    }
    Object.defineProperty(CleaveDirective.prototype, "cleave", {
        set: function (options) {
            var cleaveOpts = null;
            // simple type (see availableTypes)
            if (typeof options === 'string' && availableTypes.indexOf(options) !== -1) {
                cleaveOpts = {};
                cleaveOpts[options] = true;
            }
            // literal options object
            if (typeof options === 'string' && options.match(/^\{/)) {
                try {
                    cleaveOpts = JSON.parse(options);
                }
                catch (e) {
                    console.error('Angular2 Cleave : options object could not be parsed. Check that JSON syntax is correct.');
                }
            }
            // handle error if option is not available
            if (typeof options === 'string' && cleaveOpts === null) {
                console.error('Angular2 Cleave : option is not valid (%s).\n Available options : %s', options, availableTypes.join(', '));
            }
            // Cleave.js options object
            if (typeof options === 'object') {
                cleaveOpts = options;
            }
            // let's go !
            if (cleaveOpts !== null) {
                this.initCleave(cleaveOpts);
            }
        },
        enumerable: true,
        configurable: true
    });
    // instanciate Cleave.js
    CleaveDirective.prototype.initCleave = function (opts) {
        this.cleaveInstance = new cleave_js_1.default(this.el.nativeElement, opts);
    };
    CleaveDirective = __decorate([
        core_1.Directive({
            selector: '[cleave]',
            inputs: ['cleave']
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], CleaveDirective);
    return CleaveDirective;
}());
exports.CleaveDirective = CleaveDirective;
//# sourceMappingURL=index.js.map