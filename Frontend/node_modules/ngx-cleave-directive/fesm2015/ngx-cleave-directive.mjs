import * as i0 from '@angular/core';
import { Directive, Optional, Input, HostListener, NgModule } from '@angular/core';
import Cleave from 'cleave.js';
import * as i1 from '@angular/forms';

class NgxCleaveDirective {
    constructor(elementRef, ngControl) {
        this.elementRef = elementRef;
        this.ngControl = ngControl;
    }
    set cleave(cleave) {
        this._cleave = cleave;
        this.setCleave();
    }
    ngOnInit() {
        if (!this.ngControl) {
            console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');
            return;
        }
        this._valueAccessor = this.ngControl.valueAccessor;
        this._writeValue = this._valueAccessor.writeValue;
        this._valueAccessor.writeValue = (value) => {
            if (this._writeValue) {
                this._writeValue.call(this._valueAccessor, value);
            }
            this.setCleave();
        };
    }
    ngOnDestroy() {
        if (this._valueAccessor && this._writeValue) {
            this._valueAccessor.writeValue = this._writeValue;
        }
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
    }
    onInput(value) {
        this._value = value;
    }
    setCleave() {
        if (this._cleaveInstance) {
            this._cleaveInstance.destroy();
        }
        const el = this.elementRef.nativeElement;
        this._cleaveInstance = new Cleave(el, Object.assign(Object.assign({}, this._cleave), { onValueChanged: ({ target }) => {
                if (target.value !== this._value) {
                    this.dispatchEvent(el, 'input');
                }
                if (this._cleave.onValueChanged && typeof this._cleave.onValueChanged === 'function') {
                    this._cleave.onValueChanged({ target });
                }
            } }));
        // hack for model -> view cleave
        setTimeout(() => this.dispatchEvent(el, 'input'), 0);
    }
    dispatchEvent(el, eventType) {
        const event = document.createEvent('Event');
        event.initEvent(eventType, false, false);
        el.dispatchEvent(event);
    }
}
/** @nocollapse */ /** @nocollapse */ NgxCleaveDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgControl, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ /** @nocollapse */ NgxCleaveDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.3", type: NgxCleaveDirective, selector: "input[cleave],textarea[cleave]", inputs: { cleave: "cleave" }, host: { listeners: { "input": "onInput($event.target.value)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[cleave],textarea[cleave]',
                }]
        }], ctorParameters: function () {
        return [{ type: i0.ElementRef }, { type: i1.NgControl, decorators: [{
                        type: Optional
                    }] }];
    }, propDecorators: { cleave: [{
                type: Input,
                args: ['cleave']
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event.target.value']]
            }] } });

class NgxCleaveDirectiveModule {
}
/** @nocollapse */ /** @nocollapse */ NgxCleaveDirectiveModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirectiveModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ /** @nocollapse */ NgxCleaveDirectiveModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirectiveModule, declarations: [NgxCleaveDirective], exports: [NgxCleaveDirective] });
/** @nocollapse */ /** @nocollapse */ NgxCleaveDirectiveModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirectiveModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: NgxCleaveDirectiveModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [NgxCleaveDirective],
                    exports: [NgxCleaveDirective],
                }]
        }] });

/*
 * Public API Surface of ngx-cleave-directive
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxCleaveDirective, NgxCleaveDirectiveModule };
//# sourceMappingURL=ngx-cleave-directive.mjs.map
