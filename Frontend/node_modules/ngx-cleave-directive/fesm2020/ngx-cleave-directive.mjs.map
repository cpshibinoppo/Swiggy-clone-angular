{"version":3,"file":"ngx-cleave-directive.mjs","sources":["../../../projects/ngx-cleave-directive/src/lib/ngx-cleave.directive.ts","../../../projects/ngx-cleave-directive/src/lib/ngx-cleave-directive.module.ts","../../../projects/ngx-cleave-directive/src/lib/index.ts","../../../projects/ngx-cleave-directive/src/lib/ngx-cleave-directive.ts"],"sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n} from '@angular/forms';\n\nimport Cleave from 'cleave.js';\n\n@Directive({\n  selector: 'input[cleave],textarea[cleave]',\n})\nexport class NgxCleaveDirective implements OnInit, OnDestroy {\n\n  @Input('cleave') set cleave (cleave: any) {\n\n    this._cleave = cleave;\n\n    this.setCleave();\n\n  }\n\n  private _cleave: any;\n  private _cleaveInstance: Cleave;\n  private _value: string;\n  private _valueAccessor: ControlValueAccessor;\n  private _writeValue: (value) => void;\n\n  constructor (\n    private elementRef: ElementRef,\n    @Optional() private ngControl: NgControl,\n  ) {\n  }\n\n  ngOnInit () {\n\n    if (!this.ngControl) {\n\n      console.warn('Note: The cleave directive should be used with the ngModel, formControl or formControlName directives.');\n\n      return;\n\n    }\n\n    this._valueAccessor = this.ngControl.valueAccessor;\n\n    this._writeValue = this._valueAccessor.writeValue;\n    this._valueAccessor.writeValue = (value) => {\n\n      if (this._writeValue) {\n        this._writeValue.call(this._valueAccessor, value);\n      }\n\n      this.setCleave();\n\n    };\n\n  }\n\n  ngOnDestroy () {\n\n    if (this._valueAccessor && this._writeValue) {\n\n      this._valueAccessor.writeValue = this._writeValue;\n\n    }\n\n    if (this._cleaveInstance) {\n\n      this._cleaveInstance.destroy();\n\n    }\n\n  }\n\n  @HostListener('input', ['$event.target.value'])\n  onInput (value: string): void {\n\n    this._value = value;\n\n  }\n\n  private setCleave () {\n\n    if (this._cleaveInstance) {\n\n      this._cleaveInstance.destroy();\n\n    }\n\n    const el = this.elementRef.nativeElement;\n    this._cleaveInstance = new Cleave(el, {\n      ...this._cleave,\n      onValueChanged: ({ target }) => {\n        if (target.value !== this._value) {\n\n          this.dispatchEvent(el, 'input');\n\n        }\n\n        if (this._cleave.onValueChanged && typeof this._cleave.onValueChanged === 'function') {\n\n          this._cleave.onValueChanged({ target });\n\n        }\n      },\n    });\n\n    // hack for model -> view cleave\n    setTimeout(() => this.dispatchEvent(el, 'input'), 0);\n\n  }\n\n  private dispatchEvent (el, eventType) {\n\n    const event = document.createEvent('Event');\n    event.initEvent(eventType, false, false);\n    el.dispatchEvent(event);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCleaveDirective } from './ngx-cleave.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxCleaveDirective],\n  exports: [NgxCleaveDirective],\n})\nexport class NgxCleaveDirectiveModule {\n}\n","/*\n * Public API Surface of ngx-cleave-directive\n */\n\nexport * from './ngx-cleave.directive';\nexport * from './ngx-cleave-directive.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}